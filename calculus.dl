#include "normalisation2.dl"

////////////////////////////////////////////////////////////////////////////////
// deduction calculus

#include "calculus.sbox.dl"
#include "calculus.abox.dl"
#include "calculus.self.dl"

// for convenience, we use only concept names here and encode also top and bottom using their names as given by ct2name
.decl is_top(c: ConceptName)
is_top(top) :- ct2name($Top(), top).

.decl is_bot(c: ConceptName)
is_bot(bot) :- ct2name($Bottom(), bot).

// for checking whether a “concept name” represents a nominal concept
// this predicate will have an empty extension unless abox reasoning is activated ("calculus.abox.dl")
.decl is_nom(n: ConceptName)

// there is at least one (anonymous) individual
is_nom("{_}").

// nested sequents
.decl gci_nested(u: StandpointName, b: ConceptName, s: StandpointName, c: ConceptName, d: ConceptName)

// for debugging
//.output gci_nested
//.limitsize gci_nested(n=10000)

// conversion of some normal-form GCIs
gci_nested(all, top, s, c, d) :- gci_nf_names(s, c, d), is_all(all), is_top(top).

gci_nested(all, c, s, top, d) :- gci_nf_box_right(c, s, d), is_all(all), is_top(top).

////////
// role inclusion

// axiom
// (T.5)
ria2(all, r, r) :- is_rn(r), is_all(all).

// inheritance across standpoints
// (S.3)
ria2(s, r1, r2) :- ria2(u, r1, r2), sharper_nf(s, u).

// (S.3)
ria3(s, r1, r2, r3) :- ria3(u, r1, r2, r3), sharper_nf(s, u).

// role subsumptions
// (R.1)
ria2(s, r1, r3) :- ria2(s, r1, r2), ria2(s, r2, r3).

////////
// GCIs

// axioms

// (T.3)
gci_nested(all, top, all, c, c), 
// (T.4)
gci_nested(all, top, all, c, top)
:- is_cn(c), !is_nom(c), is_top(top), is_all(all).

// standpoint hierarchy rules
// (S.4)
gci_nested(t, c, s, d, e) :- gci_nested(t, c, u, d, e), sharper_nf(s, u).

// (S.3)
gci_nested(s, c, t, d, e) :- gci_nested(u, c, t, d, e), sharper_nf(s, u).

// (S.3)
gci_nf_diamond_right(s, c, t, d) :- gci_nf_diamond_right(u, c, t, d), sharper_nf(s, u).

// (S.3)
gci_nf_existential_right(s, c, r, d) :- gci_nf_existential_right(u, c, r, d), sharper_nf(s, u).

// (S.3)
gci_nf_existential_left(s, r, c, d) :- gci_nf_existential_left(u, r, c, d), sharper_nf(s, u).

// (S.3)
gci_nf_conjunction_left(s, c1, c2, d) :- gci_nf_conjunction_left(u, c1, c2, d), sharper_nf(s, u).

// forward chaining
// (C.1)
gci_nested(t, b, s, c, e) :- gci_nested(t, b, s, c, d), gci_nested(t, b, s, d, e).

// (C.2)
gci_nested(t, b, s, d, e) :- gci_nested(_, top, t, b, c), gci_nested(t, c, s, d, e), is_top(top).

// (C.3)
gci_nf_diamond_right(t, c, s, e) :- gci_nested(_, top, t, c, d), gci_nf_diamond_right(t, d, s, e), is_top(top).

// (C.4)
gci_nf_diamond_right(t, c, s, e) :- gci_nf_diamond_right(t, c, s, d), gci_nested(t, c, s, d, e).

// flattening of modalities
// (F.1)
gci_nested(t, c, s, e, f) :- gci_nested(t, c, u, top, d), gci_nested(u, d, s, e, f), is_top(top).

// (F.2)
gci_nf_diamond_right(t, c, s, e) :- gci_nested(t, c, u, top, d), gci_nf_diamond_right(u, d, s, e), is_top(top).

// (F.3)
gci_nested(t, c, s, e, f) :- gci_nf_diamond_right(t, c, u, d), gci_nested(u, d, s, e, f).

// (F.4)
gci_nf_diamond_right(t, c, s, e) :- gci_nf_diamond_right(t, c, u, d), gci_nf_diamond_right(u, d, s, e).

// inferences involving existential restriction
// (E.1)
gci_nf_existential_right(s, c, r2, e) :- gci_nf_existential_right(s, c, r1, d), gci_nested(_, top, s, d, e), ria2(s, r1, r2), is_top(top).

// (E.2)
gci_nf_existential_right(s, c, r3, e) :- gci_nf_existential_right(s, c, r1, d), gci_nf_existential_right(s, d, r2, e), ria3(s, r1, r2, r3).

// (E.3)
gci_nested(all, top, s, c, f) :- gci_nf_existential_right(s, c, r, d), gci_nf_existential_left(s, r, d, f), is_top(top), is_all(all).

// inference involving conjunction
// (E.4)
gci_nested(t, b, s, c, d) :- gci_nested(t, b, s, c, c1), gci_nested(t, b, s, c, c2), gci_nf_conjunction_left(s, c1, c2, d).

// internal inferences for extended (nested) GCIs
// (I.1)
gci_nested(all, top, s, c, d) :- gci_nested(s, c, s, top, d), is_top(top), is_all(all).

// (I.2)
gci_nested(all, top, s, c, d) :- gci_nested(_, top, s, c, d), is_all(all), is_top(top).

// backpropagation of bot inferences
// (B.1)
gci_nested(all, top, s, c, bot) :- gci_nf_existential_right(s, c, _, bot), is_top(top), is_bot(bot), is_all(all).

// (B.2)
gci_nested(all, top, t, c, bot) :- gci_nested(t, c, _, top, bot), is_all(all), is_top(top), is_bot(bot).

// (B.3)
gci_nested(all, top, s, c, bot) :- gci_nf_diamond_right(s, c, _, bot), is_all(all), is_top(top), is_bot(bot).

// (B.4)
gci_nested(all, top, all, top, bot) :- gci_nested(_, nom , _, top , bot), is_top(top), is_bot(bot), is_all(all), is_nom(nom).

// detecting inconsistency
.decl empty(c: ConceptName)

.output empty

empty(c) :- gci_nested(all, top, all, c, bot), is_top(top), is_all(all), is_bot(bot).
// KB is inconsistent iff c_top appears as member of empty
